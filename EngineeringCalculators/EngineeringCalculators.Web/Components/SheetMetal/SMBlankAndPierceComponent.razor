
<div>
    <fieldset>
        <legend>Enter Values</legend>
        <EditForm Model="Model" FormName="BlankAndPierceCalculation" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <fieldset style="width:fit-content; text-align:center">
                <legend>Use</legend>
                <div style="margin: 5px;">
                    <InputRadioGroup TValue="string" Name="calcType" @bind-Value:get="@Model.CalcType" @bind-Value:set="(Value) => SetCalcType(Value)" >
                        <InputRadio TValue="string" Value=@nameof(Enums.PierceAndBlankCalcType.Tensile)/> <span> Tensile Strength &nbsp; </span>
                        <InputRadio TValue="string" Value=@nameof(Enums.PierceAndBlankCalcType.Shear) /> <span> Shear Strength </span>
                    </InputRadioGroup>
                </div>
            </fieldset>

            <div>
                <ValidationMessage For="@(() => Model.ProjectName)" />
                <label for="projectName">Project Name</label>
                <InputText id="projectName" @bind-Value="Model.ProjectName" />
            </div>

            <div>
                <label for="description">Description</label>
                <InputText id="description" @bind-Value="Model.Description" />
            </div>

            <div>
                <ValidationMessage For="@(() => Model.NumberOfPunches)" />
                <label for="numberOfPunches">Number of Punches</label>
                <InputNumber TValue="int" id="numberOfPunches" @bind-Value="Model.NumberOfPunches" />
            </div>

            <div>
                <ValidationMessage For="@(() => Model.Perimeter)" />
                <label for="perimeter">Perimeter (mm)</label>
                <InputNumber TValue="double" id="perimeter" @bind-Value="Model.Perimeter" />
            </div>

            <div>
                @if (Model.CalcType.Equals(nameof(Enums.PierceAndBlankCalcType.Tensile)) && String.IsNullOrWhiteSpace(CalcErrorMessage) == false)
                {
                    <label style="color: red">@CalcErrorMessage</label>
                    <br />
                }

                <label for="tensileStrength">Tensile Strength (MPA)</label>
                <InputNumber TValue="double" id="tensileStrength" @bind-Value="Model.TensileStrength" />
            </div>

            <div>
                @if (Model.CalcType.Equals(nameof(Enums.PierceAndBlankCalcType.Shear)) && String.IsNullOrWhiteSpace(CalcErrorMessage) == false)
                {
                    <label style="color: red">@CalcErrorMessage</label>
                    <br />
                }
                <label for="shearStrength">Shear Strength (MPA)</label>
                <InputNumber TValue="double" id="shearStrength" @bind-Value="Model.ShearStrength" />
            </div>

            <div>
                <ValidationMessage For="@(() => Model.PercentageOfTensileStrength)" />
                <label for="percentOfTensileStrength">Percent Of Tensile Strength</label>
                <InputNumber TValue="double" id="percentOfTensileStrength" @bind-Value="Model.PercentageOfTensileStrength" />
            </div>

            <div>
                <fieldset>
                    <legend>Results</legend>
                    <div>
                        <label for="cuttingForce">Cutting Force (N)</label>
                        <InputNumber TValue="double" id="cuttingForce" @bind-Value="Model.CuttingForce" />
                    </div>

                    <div>
                        <label for="strippingForce">Stripping Force</label>
                        <InputNumber TValue="double" id="strippingForce" @bind-Value="Model.StrippingForce" />
                    </div>

                    <div>
                        <label for="clearance">Clearance</label>
                        <InputNumber TValue="double" id="clearance" @bind-Value="Model.Clearance" />
                    </div>
                </fieldset>
            </div>

            <div>
                <button type="submit" @onclick=@(() => SetSubmitType(nameof(Enums.SubmitType.Calculate)))>Calculate</button>
                <button type="submit" @onclick=@(() => SetSubmitType(nameof(Enums.SubmitType.Save)))>Save</button>
            </div>
        </EditForm>
    </fieldset>

</div>


@* Form to show the results *@

